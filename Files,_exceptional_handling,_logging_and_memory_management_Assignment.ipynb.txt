{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oGxX0Au6jrL_"
      },
      "outputs": [],
      "source": [
        "hi"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**THEORY QUESTIONS**\n",
        "\n",
        "Q 1:  What is the difference between interpreted and compiled languages?\n",
        "\n",
        "A 1: A compiled language is converted into machine code so that the processor can execute it. An interpreted language is a language in which the implementations execute instructions directly without earlier compiling a program into machine language. The compiled programs run faster than interpreted programs.\n",
        "\n",
        "\n",
        "Q 2: What is exception handling in Python?\n",
        "\n",
        "A 2: Exception handling in Python is a way to prepare for and deal with errors that can occur while a program is running.\n",
        "\n",
        "\n",
        "Q 3: What is the purpose of the finally block in exception handling?\n",
        "\n",
        "A 3: The finally block always executes when the try block exits. This ensures that the finally block is executed even if an unexpected exception occurs.\n",
        "\n",
        "\n",
        "Q 4: What is logging in Python?\n",
        "\n",
        "A 4: Python logging is a module that allows you to track events that occur while your program is running. You can use logging to record information about errors, warnings, and other events that occur during program execution. And logging is a useful tool for debugging, troubleshooting, and monitoring your program.\n",
        "\n",
        "\n",
        "Q 5: What is the significance of the __del__ method in Python?\n",
        "\n",
        "A 5: The __del__ method in Python, also known as a destructor method, is used to release resources associated with an object when it is deleted. This method is called by the garbage collector after all references to the object have been destroyed.\n",
        "\n",
        "\n",
        "Q 6: What is the difference between import and from ... import in Python?\n",
        "\n",
        "A 6: The difference between import and from import in Python is: import imports an entire code library. from import imports a specific member or members of the library.\n",
        "\n",
        "\n",
        "Q 7: How can you handle multiple exceptions in Python?\n",
        "\n",
        "A 7: Python allows you to catch multiple exceptions in a single 'except' block by specifying them as a tuple. This feature is useful when different exceptions require similar handling logic. In this case, if either 'ExceptionType1' or 'ExceptionType2' is raised, the code within the 'except' block will be executed.\n",
        "\n",
        "\n",
        "Q 8: What is the purpose of the with statement when handling files in Python?\n",
        "\n",
        "A 8: The with statement in Python is used to simplify the management of resources such as file streams, network connections, and locks. It ensures that resources are properly acquired and released, avoiding common issues such as resource leaks.\n",
        "\n",
        "\n",
        "Q 9: What is the difference between multithreading and multiprocessing?\n",
        "\n",
        "A 9: Multithreading refers to the ability of a processor to execute multiple threads concurrently, where each thread runs a process. Multiprocessing refers to the ability of a system to run multiple processors in parallel, where each processor can run one or more threads.\n",
        "\n",
        "\n",
        "Q 10: What are the advantages of using logging in a program?\n",
        "\n",
        "A 10: Logging in a program can be beneficial in many ways, including:\n",
        "\n",
        "Debugging: Logging can help identify and troubleshoot issues that arise while a program is running. In production environments, log files are often the only source of information for debugging unexpected errors.\n",
        "\n",
        "Performance tracking: Logging can help track how an application is performing.\n",
        "\n",
        "Application understanding: Logging can help developers understand how users are interacting with an application.\n",
        "\n",
        "Security, reliability, and stability: Logging can help improve the security, reliability, and stability of an application.\n",
        "\n",
        "Auditing and compliance: Logs can be used to create a record of activity for auditing and compliance purposes.\n",
        "\n",
        "Improved detection of problems: Logging can help improve the detection of problems and reduce the time it takes to fix them.\n",
        "\n",
        "Transparency: Logging can increase transparency throughout a system.\n",
        "\n",
        "\n",
        "Q 11: What is memory management in Python?\n",
        "\n",
        "A 11: Python memory management is the process of allocating and dealing with memory so that your programs can run efficiently. One advantage of Python, compared to other programming languages, is that it can perform memory management tasks automatically.\n",
        "\n",
        "\n",
        "Q 12: What are the basic steps involved in exception handling in Python?\n",
        "\n",
        "A 12: Python's exception handling consists of five keywords: \"try,\" \"except,\" \"else,\" \"finally,\" and \"raise,\" each used to manage different aspects of error.\n",
        "\n",
        "\n",
        "Q 13: Why is memory management important in Python?\n",
        "\n",
        "A 13: Memory management is important in Python because it helps ensure that memory is used efficiently and prevents memory leaks, which can lead to slower programs.\n",
        "\n",
        "\n",
        "Q 14: What is the role of try and except in exception handling.\n",
        "\n",
        "A 14: A Try-Except statement is a code block that allows your program to take alternative actions in case an error occurs. Python will first attempt to execute the code in the try statement (code block 1). If no exception occurs, the except statement is skipped and the execution of the try statement is finished.\n",
        "\n",
        "\n",
        "Q 15: How does Python's garbage collection system work?\n",
        "\n",
        "A 15: Garbage collection, an automatic memory management technique, is used by programming languages to deallocate memory that is no longer required by the program. The garbage collector in Python locates and releases memory occupied by objects that can no longer be accessed or referenced by the program's code.\n",
        "\n",
        "\n",
        "Q 16: What is the purpose of the else block in exception handling?\n",
        "\n",
        "A 16: The try block lets you test a block of code for errors. The except block lets you handle the error. The else block lets you execute code when there is no error.\n",
        "\n",
        "\n",
        "Q 17: What are the common logging levels in Python?\n",
        "\n",
        "A 17: Python's logging module has five logging levels, each with a specific integer value that indicates the severity of the log:\n",
        "NOTSET: 0\n",
        "DEBUG: 10\n",
        "INFO: 20\n",
        "WARNING: 30\n",
        "ERROR: 40\n",
        "CRITICAL: 50\n",
        "\n",
        "\n",
        "Q 18: What is the difference between os.fork() and multiprocessing in Python?\n",
        "\n",
        "A 18:\n",
        "multiprocess is a fork of multiprocessing. multiprocess extends multiprocessing to provide enhanced serialization, using dill . multiprocess leverages multiprocessing to support the spawning of processes using the API of the Python standard library's threading module.\n",
        "\n",
        "\n",
        "Q 19: What is the importance of closing a file in Python?\n",
        "\n",
        "A 19: Closing a file after use is important because it frees up system resources that are being used by the file. When a file is open, the operating system allocates memory and other resources to the file, which can potentially impact the performance of the system if too many files are open at the same time.\n",
        "\n",
        "\n",
        "Q 20: What is the difference between file.read() and file.readline() in Python?\n",
        "\n",
        "A 20? The read() function reads the entire file and returns it as a string. You can also specify a number of bytes to read. Explanation: The readline() function reads one line at a time from the file. This is useful when you want to process files line by line.\n",
        "\n",
        "\n",
        "Q 21: What is the logging module in Python used for?\n",
        "\n",
        "A 21: Python logging is a module that allows you to track events that occur while your program is running. You can use logging to record information about errors, warnings, and other events that occur during program execution. And logging is a useful tool for debugging, troubleshooting, and monitoring your program.\n",
        "\n",
        "\n",
        "Q 22: What is the os module in Python used for in file handling?\n",
        "\n",
        "A 22: Python has a built-in os module with methods for interacting with the operating system, like creating files and directories, management of files and directories, input, output, environment variables, process management, etc.\n",
        "\n",
        "\n",
        "Q 23: What are the challenges associated with memory management in Python?\n",
        "\n",
        "A 23: Memory management problems. The basic problem in managing memory is knowing when to keep the data it contains, and when to throw it away so that the memory can be reused. This sounds easy, but is, in fact, such a hard problem that it is an entire field of study in its own right.\n",
        "\n",
        "\n",
        "Q 24: How do you raise an exception manually in Python?\n",
        "\n",
        "A 24: To manually raise an exception in Python, use the raise statement. Here is an example of how to use it: Copied! In this example, the calculate_payment function raises a ValueError exception if the payment_type is not either \"Visa\" or \"Mastercard\".\n",
        "\n",
        "\n",
        "Q 25: Why is it important to use multithreading in certain applications?\n",
        "\n",
        "A 25: Python multithreading enables efficient utilization of the resources as the threads share the data space and memory. Multithreading in Python allows the concurrent and parallel occurrence of various tasks. It causes a reduction in time consumption or response time, thereby increasing the performance."
      ],
      "metadata": {
        "id": "gY0LS7TljsU4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**PRACTICAL QUESTION**"
      ],
      "metadata": {
        "id": "dGrxaFxRwu_c"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 1: How can you open a file for writing in Python and write a string to it?"
      ],
      "metadata": {
        "id": "-cfp0O4yxGwP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "text_content = \"\"\"\n",
        "example1\n",
        "example2\n",
        "example3\n",
        "\"\"\""
      ],
      "metadata": {
        "id": "jFU4ORz7xGas"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Aw2HLRjyxGFP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "with open(\"example.txt\", \"w\") as file:\n",
        "\t    file.write(text_content)"
      ],
      "metadata": {
        "id": "OM9hCxYAxF6j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "with open(\"example.txt\", \"r\") as file:\n",
        "\t    data = file.read()\n",
        "print(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9FAcZb4Owt56",
        "outputId": "61e0ce44-7b6d-40f9-9236-5994c0dbf1b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " \n",
            "example1\n",
            "example2\n",
            "example3\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 2: Write a Python program to read the contents of a file and print each line."
      ],
      "metadata": {
        "id": "otOw6OKC2EDd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "with open(\"example.txt\", \"r\") as file:\n",
        "\t    for line in file:\n",
        "\t        print(line)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uaNSaiIk2Ntm",
        "outputId": "b7220c32-9670-4ad8-f1a9-ac82d0f652b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " \n",
            "\n",
            "example1\n",
            "\n",
            "example2\n",
            "\n",
            "example3\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 3: How would you handle a case where the file doesn't exist while trying to open it for reading?"
      ],
      "metadata": {
        "id": "OHr6wJ2B24Ld"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Handle a case where the file doesn't exist while trying to open it for reading\n",
        "try:\n",
        "    with open(\"nonexistent_file.txt\", \"r\") as file:\n",
        "        content= file.read()\n",
        "        print (content)\n",
        "except FileNotFoundError:\n",
        "    print(\"The file does not exist.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KqWlXCwx23uC",
        "outputId": "ef520ceb-e838-4ff8-e953-fe1e7a60980e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The file does not exist.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 4: Write a Python script that reads from one file and writes its content to another file."
      ],
      "metadata": {
        "id": "5Svh8BA253ao"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Script that reads from one file and writes its content to another file\n",
        "\n",
        "import os\n",
        "\n",
        "# print files in present dir before creating file2\n",
        "print(\"List of files before\")\n",
        "print(os.listdir())\n",
        "print(\"\\n\")\n",
        "\n",
        "#open file1 in reading mode\n",
        "file1 = open('file1.txt', 'r')\n",
        "\n",
        "#open file2 in writing mode\n",
        "file2 = open('file2.txt','w')\n",
        "\n",
        "#read from file1 and write to file2\n",
        "for line in file1:\n",
        "    file2.write(line)\n",
        "\n",
        "#close file1 and file2\n",
        "file1.close()\n",
        "file2.close()\n",
        "\n",
        "#open file2 in reading mode\n",
        "file2 = open('file2.txt','r')\n",
        "\n",
        "#print the file2 content\n",
        "print(file2.read())\n",
        "\n",
        "#close the file2\n",
        "file2.close()\n",
        "\n",
        "#print the files after creating file2, check the output\n",
        "print(\"\\n\")\n",
        "print(\"List of files after\")\n",
        "print(os.listdir())\n",
        "print(\"\\n\")"
      ],
      "metadata": {
        "id": "HvKPa6P65_TD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "outputId": "ff976375-9193-4b4b-b86b-9d825ddf8f88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "List of files before\n",
            "['.config', 'sample_data']\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: 'file1.txt'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-a482084e2364>\u001b[0m in \u001b[0;36m<cell line: 11>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m#open file1 in reading mode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mfile1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'file1.txt'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m#open file2 in writing mode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'file1.txt'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 5: How would you catch and handle division by zero error in Python?"
      ],
      "metadata": {
        "id": "PYs4UdYeN6HG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "AmIiBNRKOHbe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "\t\tresult = 10/0\n",
        "except ZeroDivisionError as e:\n",
        "      print (e)\n",
        "      print(\"Error: Division by zero\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wJbEXUcROIcO",
        "outputId": "17321b38-36fe-48ba-cb7d-c7858f6bc721"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "division by zero\n",
            "Error: Division by zero\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 6: Write a Python program that logs an error message to a log file when a division by zero exception occurs."
      ],
      "metadata": {
        "id": "gGXo0lYMRFEw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        " \tresult= 10/0\n",
        "except ZeroDivisionError as e:\n",
        "  \tprint (end=\"Error: Division by zero\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TciIm9UrRgTw",
        "outputId": "3a56c56a-1cff-45b6-c705-2c52a377d673"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error: Division by zero"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 7: How do you log information at different levels (INFO, ERROR, WARNING) in Python using the logging module?"
      ],
      "metadata": {
        "id": "eM4UnTe4SKNL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "eIoULLkWRf1O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import logging\n",
        "logging.basicConfig(filename = \"test_new.log\", level = logging.DEBUG, format = '%(asctime)s %(message)s')"
      ],
      "metadata": {
        "id": "brcPVqjkSRd9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logging.debug(\"This msg is for debugging\")\n",
        "logging.info(\"This is my info msg\")\n",
        "logging.warning(\"This is my warning msg\")\n",
        "logging .error(\"Some error has happened\")\n",
        "logging.shutdown()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Nu8bjuqTJlt",
        "outputId": "089f5597-246c-44f3-ab7e-9fc43a3777d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:root:This is my warning msg\n",
            "ERROR:root:Some error has happened\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 8: Write a program to handle a file opening error using exception handling."
      ],
      "metadata": {
        "id": "PThEwJoNT4nK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    f = open(\"example.txt\", \"r\")\n",
        "except Exception as e:#exception will always come inside except block\n",
        "    print(\"There is an issue with the code and the issue is:\", e)\n",
        "print(6+3)\n",
        "print(\"This is my next step\")\n"
      ],
      "metadata": {
        "id": "asDbgqgvUBac",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b7da21a8-03b6-449e-e9c9-2789a8f63817"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There is an issue with the code and the issue is: [Errno 2] No such file or directory: 'example.txt'\n",
            "9\n",
            "This is my next step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 9: How can you read a file line by line and store its content in a list in Python?"
      ],
      "metadata": {
        "id": "vOXNBII2X_xA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Read a file line by line and store its content in a list in Python\n",
        "\n",
        "with open (\"example.txt\", \"w\") as file:\n",
        "        file.write(\"This is some example content\")\n",
        "\n",
        "with open(\"example.txt\",\"r\") as file:\n",
        "    lines= file.readlines()\n",
        "    print(lines)\n",
        "    for line in lines:\n",
        "      \tprint(line)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eDMnclh0X--b",
        "outputId": "4f636115-20d3-487f-a1bd-d26f1e4966d5"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['This is some example content']\n",
            "This is some example content\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 10: How can you append data to an existing file in Python?"
      ],
      "metadata": {
        "id": "UJwlGeqjbYm5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "file = open(\"file.txt\", \"w\")\n",
        "file.write(\"This is my first line\\n\")\n",
        "file.write(\"This is my second line\\n\")\n",
        "file.write(\"This is my third line\\n\")\n",
        "file.write(\"This is my fourth line\\n\")\n",
        "file.close()"
      ],
      "metadata": {
        "id": "jZLgKxrbeej9"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "file = open(\"file.txt\", \"a\") #append the new line\n",
        "file.write(\"This is fifth line\")\n",
        "file.close()"
      ],
      "metadata": {
        "id": "tHxEDUFOfdtN"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 11: Write a Python program that uses a try-except block to handle an error when attempting to access a\n",
        "dictionary key that doesn't exist."
      ],
      "metadata": {
        "id": "NiTcbGccf_VI"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cUQ0RF3UfuOR"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "RKWlldP5fdSC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    d = {\"name\": \"Ajay\"}\n",
        "    print(d[\"age\"])  # Corrected indentation\n",
        "except KeyError as e: # Changed 'keyerror' to 'KeyError'\n",
        "    print(e)\n",
        "\n",
        "print(\"This is my first line of code\")\n",
        "print(3*5*6)\n",
        "d = {\"name\": \"Ajay\"}\n",
        "print(type(d))\n",
        "#print(d[\"age\"]) # This line is commented out as it will raise a KeyError\n",
        "print(\"This is last line of code\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D--CjKvIoEY1",
        "outputId": "5b2d98c6-5125-41ee-f763-992c1e70c363"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'age'\n",
            "This is my first line of code\n",
            "90\n",
            "<class 'dict'>\n",
            "This is last line of code\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 12: Write a program that demonstrates using multiple except blocks to handle different types of exceptions."
      ],
      "metadata": {
        "id": "j-03w0PAoY7s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#handle multiple exceptions in separate blocks\n",
        "try:\n",
        "    10/0\n",
        "except ZeroDivisionError as e:\n",
        "    print(\"The divison is not possible due the error>>\", e)\n",
        "except TypeError as e:\n",
        "    print(\"This is value error>>\", e)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QpxvFHdOoknq",
        "outputId": "999255f5-de72-4cb4-9117-3bfc1ef6d20b"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The divison is not possible due the error>> division by zero\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "dWvRkspGojqq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 13: How would you check if a file exists before attempting to read it in Python?"
      ],
      "metadata": {
        "id": "qyKC_tu0pu3N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check if a file exists before attempting to rea\n",
        "import os\n",
        "if os.path.exists(\"example.txt\"):\n",
        "    with open(\"example.txt\",\"r\") as file:\n",
        "        print(file.read())\n",
        "        file.close() # Corrected indentation using spaces\n",
        "else:\n",
        "    print(\" the file does not exist\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_uIFFt80ptTo",
        "outputId": "855c5afc-2671-4805-a466-44aa613064ab"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is some example content\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 14: Write a program that uses the logging module to log both informational and error messages."
      ],
      "metadata": {
        "id": "aW1dOZdtrvVh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#say you want level name in logs as well\n",
        "\n",
        "import logging\n",
        "logging.basicConfig(filename = \"test_new1.log\", level = logging.DEBUG, format = '%(asctime)s %(levelname)s %(message)s')\n",
        "\n",
        "logging.debug(\"This msg is for debugging\")\n",
        "logging.info(\"This is my info msg\")\n",
        "logging.warning(\"This is my warning msg\")\n",
        "logging.shutdown()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ND7H8N1Xr2ZN",
        "outputId": "d86c7511-88ea-4d12-f2ee-2211d40105c6"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:root:This is my warning msg\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 15: Write a Python program that prints the content of a file and handles the case when the file is empty."
      ],
      "metadata": {
        "id": "zGE5-2U1sfnd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the content of a file and handles the case when the file is empty.\n",
        "import os\n",
        "if os.path.exists(\"example.txt\"):\n",
        "    with open(\"example.txt\",\"r\") as file:\n",
        "        print(file.read())\n",
        "        file.close()  # Ensure this line is indented at the same level as print\n",
        "else:\n",
        "    print(\" the file does not exist\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b-ueVpAAsnXU",
        "outputId": "f451a1d9-3896-4cef-9150-e1fbf9e5832b"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is some example content\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 16: Demonstrate how to use memory profiling to check the memory usage of a small program.\n"
      ],
      "metadata": {
        "id": "2YDjy_BTszdz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "memory profiling to check the ,memory usage\n"
      ],
      "metadata": {
        "id": "mxZA6l_ouhuk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 17: Write a Python program to create and write a list of numbers to a file, one number per line."
      ],
      "metadata": {
        "id": "V6G5GZGWvk5u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#create and write a list of Write a Python program to create and write a list of numbers to a file, one number per line.\n",
        "\n",
        "numbers =[1,2,3,4,5]\n",
        "with open (\"numbers.txt\",\"w\") as file:\n",
        "  for number in numbers:\n",
        "    file.write(str(number)+\"\\n\") # Corrected: Use +\"\\n\" to add a newline and corrected indentation\n",
        "  print(\"file has been created\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WJf8Y9RGvsHh",
        "outputId": "d47b9e29-0e6f-42b6-ffb4-6ca01073dc1b"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "file has been created\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 18: How would you implement a basic logging setup that logs to a file with rotation after 1MB?"
      ],
      "metadata": {
        "id": "7sG8Fa7CxRVR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#use case with example\n",
        "import logging\n",
        "logging.basicConfig(filename = \"program.log\", level = logging.DEBUG, format = '%(asctime)s %(levelname)s %(message)s')\n"
      ],
      "metadata": {
        "id": "5RcYdatdxa5H"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 19: Write a program that handles both IndexError and KeyError using a try-except block."
      ],
      "metadata": {
        "id": "QqTHDo2uxaTf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "d = {\"name\": \"Ajay\", \"class\": \"ds\"}\n",
        "try:\n",
        "  \tprint(d[\"age\"])\n",
        "except (IndexError, KeyError) as e:\n",
        "  print(e)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2jKxVHJpyYjC",
        "outputId": "7d076ecd-2296-456d-edd6-a0f9489c5bd0"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'age'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 20: How would you open a file and read its contents using a context manager in Python?"
      ],
      "metadata": {
        "id": "5k2HIdnC3fdb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Rfgwm3FRyWvJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "file = open(\"file.txt\", \"w\")\n",
        "file.write(\"This is my first line\\n\")\n",
        "file.write(\"This is my second line\\n\")\n",
        "file.write(\"This is my third line\\n\")\n",
        "file.write(\"This is my fourth line\\n\")\n",
        "file.close()"
      ],
      "metadata": {
        "id": "OokcRXxqyJTp"
      },
      "execution_count": 70,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "f = open(\"file.txt\", 'r')\n",
        "f.seek(0) #it will bring cursor to start of the the file\n",
        "print(f.read()) #it will read everything from starting\n",
        "f.close()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G7s02cPyyJOo",
        "outputId": "5d8d6eb2-15f9-4a10-9ac4-e28e4c4ddb07"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is my first line\n",
            "This is my second line\n",
            "This is my third line\n",
            "This is my fourth line\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 21: Write a Python program that reads a file and prints the number of occurrences of a specific word."
      ],
      "metadata": {
        "id": "FjFXj9hF5Q_i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Python program that reads a file and prints the number of occurrences of a specific wordF.\n",
        "\n",
        "f= open(\"file.txt\",\"r\")\n",
        "for i in f:\n",
        "  i= \"This\"\n",
        "  print(i)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mq6K8PQr5Qdr",
        "outputId": "cf37f169-9309-4212-db7e-aad24b6a0f5e"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This\n",
            "This\n",
            "This\n",
            "This\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 22: How can you check if a file is empty before attempting to read its contents."
      ],
      "metadata": {
        "id": "NIUMATm4651S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#How can you check if a file is empty before attempting to read its contents\u001f\n",
        "\n",
        "\n",
        "\n",
        "# Check if a file is empty before attempting to rea\n",
        "import os\n",
        "if os.path.exists(\"example.txt\"):\n",
        "    with open(\"example.txt\",\"r\") as file:\n",
        "        print(file.read())\n",
        "        file.close() # Corrected indentation using spaces\n",
        "else:\n",
        "    print(\" the file is empty\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "euopkNor7mRR",
        "outputId": "bc07f097-ee4b-40f6-d4d6-a7658217602a"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is some example content\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 23: Write a Python program that writes to a log file when an error occurs during file handling."
      ],
      "metadata": {
        "id": "jWCWJEPt8FX8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Python program that writes to a log file when an error occurs during file handling\n",
        "\n",
        "#say you want level name in logs as well\n",
        "\n",
        "import logging\n",
        "logging.basicConfig(filename = \"test_new1.log\", level = logging.DEBUG, format = '%(asctime)s %(levelname)s %(message)s')\n",
        "\n",
        "logging.debug(\"This msg is for debugging\")\n",
        "logging.info(\"This is my info msg\")\n",
        "logging.warning(\"This is my warning msg\")\n",
        "logging.shutdown()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kc7NRGjn8PVP",
        "outputId": "174107c4-c28c-4875-b94c-b4609b291daf"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:root:This is my warning msg\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "GbFX5UzT7l9A"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "W04Tm31f7Bnv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "evAFuCuy7E0B"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "iWn7EiyC7BNv"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Klozkk2z5oCb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "mB_VJIfyvrUq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "PcfE2gPpszjh"
      }
    }
  ]
}